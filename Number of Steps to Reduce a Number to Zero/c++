class Solution {
public:
    int numberOfSteps(int num) {
        int out = 0;
        while(num!=0){
            if(num % 2 != 0){
                num -= 1;
                out ++;
            }
            else{
                num /= 2;
                out ++;
            } 
        }
        return out;
    }
};


///// other solution

INFORMATION

num=num>>1 right shift num is equivalent to num=num/2
bitset<32>(num).count() = number of set bits(1) in num
log2(num)=number of bits required to make the num - 1
__builtin_clz(num) = It counts number of zeros before the first occurrence of 1 (set bit), that is leading zeroes in num
__builtin_popcount(num) = number of set bits(1) in num
log2(num) is equivalent to 31 - __builtin_clz(num)
bitset<32>(num).count() is equivalent to __builtin_popcount(num)

Approach 1 (Iterative, simulating the process)

SIMILAR TO THE FIRST SOLUTION

Approach 2 (Built-In)

class Solution {
public:
    int numberOfSteps (int num) {
        return num ? log2(num) + bitset<32>(num).count() : 0;
    }
};

Approach 3 (Built-In)

class Solution {
public:
    int numberOfSteps (int num) {
        return num ? log2(num) + __builtin_popcount(num) : 0;
    }
};

Approach 4 (Built-In)

class Solution {
public:
    int numberOfSteps (int num) {
        return num ? 31 - __builtin_clz(num) + bitset<32>(num).count() : 0;
    }
};

Approach 5 (Built-In)

class Solution {
public:
    int numberOfSteps (int num) {
        return num ? 31 - __builtin_clz(num) + __builtin_popcount(num) : 0;
    }
};
